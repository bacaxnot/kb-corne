/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&mmv {
    time-to-max-speed-ms = <680>;
    acceleration-exponent = <2>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &kp Q             &kp W               &kp E                            &kp R       &kp T         &kp Y  &kp U          &kp I                       &kp O                &kp P                    &kp BACKSPACE
&none  &hm LEFT_SHIFT A  &hm LEFT_CONTROL S  &hm LALT D                       &hm LGUI F  &kp G         &kp H  &hm RGUI J     &hm RALT K                  &hm RIGHT_CONTROL L  &hm RIGHT_SHIFT SEMI     &kp SINGLE_QUOTE
&none  &kp Z             &kp X               &kp C                            &kp V       &kp B         &kp N  &kp M          &kp COMMA                   &kp PERIOD           &td LG(SLASH) BACKSLASH  &none
                                             &mt LC(UP_ARROW) LC(LEFT_ARROW)  &kp SPACE   &caps_word    &to 1  &kp LC(ENTER)  &mt LC(UP_ARROW) LC(RIGHT)
            >;
        };

        left_layer {
            bindings = <
&none  &kp ESC          &kp ATSN    &td LC(LG(LS(N4))) LS(N3)  &kp DLLR          &kp PRCNT    &kp CARET  &kp LS(COMMA)  &kp LS(DOT)  &kp AMPERSAND  &kp BKSP  &none
&none  &kp TAB          &kp EQUAL   &kp LA(RBKT)               &kp LA(LS(RBKT))  &kp SQT      &kp BSLH   &kp LBRC       &kp RBRC     &kp PIPE       &to 3     &none
&none  &mt TILDE GRAVE  &kp LA(N3)  &kp LA(LBKT)               &kp LA(LS(LBKT))  &kp DQT      &kp LBKT   &kp LPRN       &kp RPRN     &kp RBKT       &none     &none
                                    &none                      &sk LSHIFT        &to 0        &to 2      &sk RALT       &none
            >;
        };

        right_layer {
            bindings = <
&none  &kp ESC  &kp C_PP  &kp C_PREV    &kp C_NEXT    &kp LS(MINUS)    &kp MINUS  &kp N7    &kp N8  &kp N9  &trans     &none
&none  &kp TAB  &trans    &kp C_VOL_DN  &kp C_VOL_UP  &kp LS(EQUAL)    &kp EQUAL  &kp N4    &kp N5  &kp N6  &kp ENTER  &none
&none  &to 4    &kp AMPS  &kp SLASH     &kp STAR      &kp DOT          &kp N0     &kp N1    &kp N2  &kp N3  &trans     &none
                          &none         &sk LGUI      &to 0            &to 3      &sk RALT  &none
            >;
        };

        tri_layer {
            bindings = <
&none  &trans               &mwh SCROLL_LEFT  &mmv MOVE_UP      &mwh SCROLL_RIGHT  &kp NUM_5    &kp LG(LBKT)  &kp LC(LS(TAB))  &kp UP        &kp LC(TAB)  &trans  &none
&none  &kp LEFT_SHIFT       &kp LEFT_ALT      &kp LEFT_CONTROL  &kp LEFT_GUI       &none        &none         &kp DOWN         &kp DOWN      &kp RIGHT    &none   &none
&none  &td LG(GRAVE) GRAVE  &mkp RCLK         &mwh SCROLL_UP    &mwh SCROLL_DOWN   &trans       &mkp LCLK     &kp PG_DN        &kp K_VOL_DN  &trans       &trans  &none
                                              &none             &trans             &to 0        &to 1         &sk RALT         &none
            >;
        };

        bt {
            bindings = <
&none  &trans      &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &trans      &trans      &trans      &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
&none  &bt BT_PRV  &bt BT_NXT  &bt BT_CLR  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &none
                               &to 0       &trans  &none     &none   &trans  &to 1
            >;
        };
    };
};
